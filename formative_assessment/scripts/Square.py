#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
import time
from math import radians
from std_srvs.srv import Empty
from turtlesim.srv import Spawn,Kill,TeleportAbsolute

# creating a global variable for Turtle_pose
deg=0
x_value=0
y_value=0

#getting the Pose value from the turtlesim
def posecallback(pose_message):
    global deg, x_value,y_value
    x_value=pose_message.x
    y_value=pose_message.y
    deg=pose_message.theta

#main function initiate the subscriber and publisher 
def main():

    rospy.init_node('turtlesim_control_gui', anonymous=True)

    global cmd_vel_pub
    cmd_vel_pub = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)
    pose_sub=rospy.Subscriber('/turtle1/pose',Pose,posecallback)

    #UI running codes generated by PYqt converter
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())

    rospy.spin()

#function to define the forward motion 
def move_in_x(value):

    twist=Twist()
    global deg,x_value,y_value

    rate=rospy.Rate(10)

    while not rospy.is_shutdown():
        
        #calculating the distance between the points
        distance =abs(x_value-value)
        
        if distance>0.1:
            twist.linear.x=2.0
            cmd_vel_pub.publish(twist)
        else:
            twist.linear.x=0.0
            cmd_vel_pub.publish(twist)
            break
    
        rate.sleep()
    print(deg,x_value,y_value)        

def move_in_y(value):

    twist=Twist()
    global deg,x_value,y_value

    rate=rospy.Rate(10)

    while not rospy.is_shutdown():

        distance =abs(y_value-value)
        #calculating the distance between the points
        if distance>0.1:
            twist.linear.x=2.0
            cmd_vel_pub.publish(twist)
        else:
            twist.linear.x=0.0
            cmd_vel_pub.publish(twist)
            break

        rate.sleep()
    print(deg,x_value,y_value)  

def rotate(value):

    twist=Twist()
    global deg

    rate=rospy.Rate(10)
    
    while not rospy.is_shutdown():

        #calculating difference in the current and expected theta value
        theta_diff=value-deg
        #normalization of theta formula - took from google
        theta_diff=(theta_diff+3.14)%(2*3.14)-3.14

        if abs(theta_diff)>0.01:
            twist.linear.x=0.0
            #turning the turtle in z axis
            twist.angular.z=0.5432*theta_diff/abs(theta_diff)
            cmd_vel_pub.publish(twist)
                    
        else :
            twist.linear.x=0.0
            twist.angular.z=0.0
            cmd_vel_pub.publish(twist)            
            break
        rate.sleep()
    print(deg)    

"""
I used this fucntion perviously, but the exact right angle not obtained in several try. the turning radian is in consistent in various try.
def turtle1_rotate():
    rospy.init_node('turtlesim',anonymous=True)
    pub =rospy.Publisher('/turtle1/cmd_vel',Twist,queue_size=10)
    sub=rospy.Subscriber('/turtle1/pose',Pose,posecallback)
    rate=rospy.Rate(10)
    
    #comment - assign Twist() to var move_val
    move_val= Twist()
    
    global deg
    
    #move_val.linear.x=0
    #move_val.angular.z=0.5

    while not rospy.is_shutdown():
        if deg != 1.565 and deg<1.5608:
            move_val.linear.x=0
            move_val.angular.z=0.5236
            pub.publish(move_val)
        
            
        if deg>1.56 :
            break
        rate.sleep()
    print(deg)
    move_val.angular.z=0
    pub.publish(move_val)
    rate.sleep()
"""    
    
def draw_square():
  
    move_in_x(8)
    rotate(1.57)
 
    move_in_y(8)
    rotate(3.14)
  
    move_in_x(5.54)
    rotate(-1.57)
  
    move_in_y(5.54)
    rotate(0.0)
    

# Form implementation generated from reading ui file 'SquareUI.ui'
#
# Created by: PyQt5 UI code generator 5.14.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets
import sys


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(660, 480)
        
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(10, 440, 621, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        
        """
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(50, 320, 561, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        """
        self.textBrowser_3 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_3.setGeometry(QtCore.QRect(45, 80, 561, 31))
        self.textBrowser_3.setObjectName("textBrowser_3")
        
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(220, 190, 181, 25))
        self.pushButton.setObjectName("pushButton")

        self.retranslateUi(Dialog)
        self.buttonBox.accepted.connect(Dialog.accept)
        self.buttonBox.rejected.connect(Dialog.reject)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.pushButton.clicked.connect(draw_square)

        

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.textBrowser_3.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Press the Button to start the Square Program</p></body></html>"))
        self.pushButton.setText(_translate("Dialog", "Draw a Square"))

# calling the main function
if __name__ == "__main__":
    main()
